import os
import rospy
import rospkg

import roslib
roslib.load_manifest('rrt_rqt_plugin_mark_arm')

from qt_gui.plugin import Plugin
from python_qt_binding import loadUi
from python_qt_binding.QtCore import QEvent, QObject, Qt, QTimer, Signal, Slot
from python_qt_binding.QtGui import QWidget, QPushButton, QHBoxLayout, QVBoxLayout, QLabel

from std_msgs.msg import String
from sensor_msgs.msg import JointState
from math import pi

class RRTRqtPluginMarkArm(Plugin):

		def __init__(self, context):
				super(RRTRqtPluginMarkArm, self).__init__(context)
				self.setObjectName('RRTRqtPluginMarkArm')
				
				# Process standalone plugin command-line arguments
				from argparse import ArgumentParser
				parser = ArgumentParser()
				# Add argument(s) to the parser.
				parser.add_argument("-q", "--quiet", action="store_true",
								      dest="quiet",
								      help="Put plugin in silent mode")
				args, unknowns = parser.parse_known_args(context.argv())
				if not args.quiet:
						print 'arguments: ', args
						print 'unknowns: ', unknowns
				
				self._widget = QWidget()
				
				rp = rospkg.RosPack()
				ui_file = os.path.join(rp.get_path('rrt_rqt_plugin_mark_arm'), 'resource', 'rrt_rqt_plugin_mark_arm.ui')
				loadUi(ui_file,  self._widget)
				
				
				self._widget.setObjectName('RRTRqtPluginMarkArmUI')
				# Show _widget.windowTitle on left-top of each plugin (when 
				# it's set in _widget). This is useful when you open multiple 
				# plugins at once. Also if you open multiple instances of your 
				# plugin at once, these lines add number to make it easy to 
				# tell from pane to pane.
				if context.serial_number() > 1:
						self._widget.setWindowTitle(self._widget.windowTitle() + (' (%d)' % context.serial_number()))
				# Add widget to the user interface
				context.add_widget(self._widget)
				
				self.pub = rospy.Publisher('joint_states', JointState)
				
				self._widget.gripper_pbtn_open.pressed.connect(self._on_gripper_open_pressed)
				
				self._widget.axis1_pbtn_move_pos.pressed.connect(self._on_axis1_move_pos_pressed)				
				self._widget.axis1_pbtn_move_neg.pressed.connect(self._on_axis1_move_neg_pressed)
				self._widget.axis1_hsld_move.valueChanged.connect(self._on_axis1_slider_value_changed)
				
			
		def _on_gripper_open_pressed(self):
				try:
					pub = rospy.Publisher('serial_out', String)
					str = "<G01CHM000001>"
					pub.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
		
		def _on_axis1_move_pos_pressed(self):
				self._widget.axis1_hsld_move.setValue(self._widget.axis1_hsld_move.value() + 1)
				
		def _on_axis1_move_neg_pressed(self):
				self._widget.axis1_hsld_move.setValue(self._widget.axis1_hsld_move.value() - 1)
				
		def _on_axis1_slider_value_changed(self, value):
				value2 = value
				try:
					pub = rospy.Publisher('serial_out', String)
					str = "<M09P%+05d>" % (value2)
					self._widget.axis1_ledt_move.setText("%.1f" % (value2/10.0))
					pub.publish(String(str))
					
					msg = JointState()
					msg.header.stamp = rospy.Time.now()
					msg.name.append("axis2_to_axis3")
					#msg.position[0] = value2
					msg.position.append(value2/180.0*pi)
					self.pub.publish(msg)
							
				except rospy.ServiceException, e:
					print("Service call failed")
				
"""
		def shutdown_plugin(self):
				# TODO unregister all publishers here
				pass
				
		def save_settings(self, plugin_settings, instance_settings):
				# TODO save intrinsic configuration, usually using:
				# instance_settings.set_value(k, v)
				pass
				
		def restore_settings(self, plugin_settings, instance_settings):
				# TODO restore intrinsic configuration, usually using:
				# v = instance_settings.value(k)
				pass
				
		#def trigger_configuration(self):
				# Comment in to signal that the plugin has a way to configure it
				# Usually used to open a configuration dialog
"""				
