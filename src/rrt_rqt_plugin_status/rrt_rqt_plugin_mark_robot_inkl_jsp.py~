import os
import rospy
import rospkg
import time
import roslib
roslib.load_manifest('rrt_rqt_plugin_mark_robot')
import xml.dom.minidom


from qt_gui.plugin import Plugin
from python_qt_binding import loadUi
from python_qt_binding.QtCore import *
from python_qt_binding.QtGui import *
from std_msgs.msg import String
from std_msgs.msg import Int16
from sensor_msgs.msg import JointState
from rrt_communication.msg import Accu
from worldmodel_msgs.srv import AddObject
from worldmodel_msgs.msg import ObjectState
from tf.msg import tfMessage
from math import pi
from sensor_msgs.msg import JointState
from threading import Thread


def get_param(name, value=None):
    private = "~%s" % name
    if rospy.has_param(private):
        return rospy.get_param(private)
    elif rospy.has_param(name):
        return rospy.get_param(name)
    else:
        return value

#TODO: FKT DEF richtig zuordnen (Allgemein/Settings)
#TODO: Konstanten definieren!
#TODO: Absolute Pfadangaben raus!
#TODO: Modularisieren!

class RRTRqtPluginMarkRobot(Plugin):

		
		def __init__(self, context):
				super(RRTRqtPluginMarkRobot, self).__init__(context)
				self.setObjectName('RRTRqtPluginMarkRobot')
				
				# Process standalone plugin command-line arguments
				from argparse import ArgumentParser
				parser = ArgumentParser()
				# Add argument(s) to the parser.
				parser.add_argument("-q", "--quiet", action="store_true",
								      dest="quiet",
								      help="Put plugin in silent mode")
				args, unknowns = parser.parse_known_args(context.argv())
				if not args.quiet:
						print 'arguments: ', args
						print 'unknowns: ', unknowns
				
				self._widget = QWidget()
				rp = rospkg.RosPack()
				ui_file = os.path.join(rp.get_path('rrt_rqt_plugin_mark_robot'),
					'resource', 'rrt_rqt_plugin_mark_robot.ui')
				loadUi(ui_file,  self._widget)
				self._widget.setObjectName('RRTRqtPluginMarkRobotUI')
				# Show _widget.windowTitle on left-top of each plugin (when 
				# it's set in _widget). This is useful when you open multiple 
				# plugins at once. Also if you open multiple instances of your 
				# plugin at once, these lines add number to make it easy to 
				# tell from pane to pane.
				if context.serial_number() > 1:
						self._widget.setWindowTitle(self._widget.windowTitle() + 
							(' (%d)' % context.serial_number()))
				# Add widget to the user interface
				context.add_widget(self._widget)

				self._pub_serial_out = rospy.Publisher('serial_out', String)				

######       JOINT STATE PUBLISHER    ##########################################				
				description = get_param('robot_description')
				robot = xml.dom.minidom.parseString(description).getElementsByTagName('robot')[0]
				self.free_joints = {}
				self.joint_list = [] # for maintaining the original order of the joints
				self.dependent_joints = get_param("dependent_joints", {})

				# Find all non-fixed joints
				for child in robot.childNodes:
						if child.nodeType is child.TEXT_NODE:
								continue
						if child.localName == 'joint':
								jtype = child.getAttribute('type')
								if jtype == 'fixed':
										continue
								name = child.getAttribute('name')
								if jtype == 'continuous':
										minval = -pi
										maxval = pi
								else:
										limit = child.getElementsByTagName('limit')[0]
										minval = float(limit.getAttribute('lower'))
										maxval = float(limit.getAttribute('upper'))

								if name in self.dependent_joints:
										continue
								if minval > 0 or maxval < 0:
										zeroval = (maxval + minval)/2
								else:
										zeroval = 0

								joint = {'min':minval, 'max':maxval, 'zero':zeroval, 'value':zeroval }
								self.free_joints[name] = joint
								self.joint_list.append(name)

								source_list = get_param("source_list", [])
								self.sources = []
								for source in source_list:
									self.sources.append(rospy.Subscriber(source, JointState, self.source_cb))

								self.pub = rospy.Publisher('joint_states', JointState)
      

######       INIT PLUGIN              ##########################################

				self._widget.ledt_victim_detected.hide()
				

######       DEF ALLGEMEIN            ##########################################

#MODELL
				#self._topic_name = 'tf'
				#self.message_class = tfMessage
				#self._subscriber = rospy.Subscriber(
				#	self._topic_name, self.message_class, self.callback_tf)	

#ACCU
				self._topic_name = 'accu'
				self.message_class = Accu
				self._subscriber = rospy.Subscriber(
					self._topic_name, self.message_class, self.callback_accu)	
				self.connect(self, SIGNAL("new_value_accu1"), self.set_ledt_accu1)
				self.connect(self, SIGNAL("new_value_accu2"), self.set_ledt_accu2)

#CO2
				self._topic_name = 'co2'
				self.message_class = Int16
				self._subscriber = rospy.Subscriber(
					self._topic_name, self.message_class, self.callback_co2)	
				self.connect(self, SIGNAL("new_value_co2"), self.set_ledt_co2)
				
#VICTIM_DETECTET
				self._topic_name = 'thermocam/string'
				self.message_class = String
				self._subscriber = rospy.Subscriber(
					self._topic_name, self.message_class, self.callback_victim_detected)	
				self.connect(self, SIGNAL("new_value_victim_detected"),					
					self.set_ledt_victim_detected)
				self._widget.pbtn_victim_detected_confirm.pressed.connect(
					self._on_victim_detected_confirm_button_pressed)
				self._widget.pbtn_victim_detected_cancel.pressed.connect(
					self._on_victim_detected_cancel_button_pressed)

#
				self._widget.pbtn_homing.pressed.connect(
					self._on_homing_button_pressed)
				self._widget.pbtn_inverse_on.pressed.connect(
					self._on_inverse_on_button_pressed)
				self._widget.pbtn_inverse_off.pressed.connect(
					self._on_inverse_off_button_pressed)
				self._widget.pbtn_motor_on.pressed.connect(
					self._on_motor_on_button_pressed)
				self._widget.pbtn_motor_off.pressed.connect(
					self._on_motor_off_button_pressed)
				self._widget.pbtn_relativ_on.pressed.connect(
					self._on_relativ_on_button_pressed)
				self._widget.pbtn_relativ_off.pressed.connect(
					self._on_relativ_off_button_pressed)

######       DEF SETTINGS             ##########################################

				self._widget.hsld_gripper_offset_move.valueChanged.connect(
					self._on_gripper_offset_slider_value_changed)
				self._widget.pbtn_gripper_offset_move_neg.pressed.connect(
					self._on_gripper_offset_move_neg_button_pressed)				
				self._widget.pbtn_gripper_offset_move_pos.pressed.connect(
					self._on_gripper_offset_move_pos_button_pressed)		

				self._widget.hsld_gripper_force_move.valueChanged.connect(
					self._on_gripper_force_slider_value_changed)
				self._widget.pbtn_gripper_force_move_neg.pressed.connect(
					self._on_gripper_force_move_neg_button_pressed)				
				self._widget.pbtn_gripper_force_move_pos.pressed.connect(
					self._on_gripper_force_move_pos_button_pressed)	

				self._widget.pbtn_head_cam_light_on.pressed.connect(
					self._on_head_cam_light_on_button_pressed)					
				self._widget.pbtn_head_cam_light_off.pressed.connect(
					self._on_head_cam_light_off_button_pressed)
				
				self._widget.hsld_front_cam_move.valueChanged.connect(
					self._on_front_cam_slider_value_changed)
				self._widget.pbtn_front_cam_move_neg.pressed.connect(
					self._on_front_cam_move_neg_button_pressed)				
				self._widget.pbtn_front_cam_move_pos.pressed.connect(
					self._on_front_cam_move_pos_button_pressed)	

				self._widget.hsld_back_cam_move.valueChanged.connect(
					self._on_back_cam_slider_value_changed)
				self._widget.pbtn_back_cam_move_neg.pressed.connect(
					self._on_back_cam_move_neg_button_pressed)				
				self._widget.pbtn_back_cam_move_pos.pressed.connect(
					self._on_back_cam_move_pos_button_pressed)	
######       DEF FLIPPER CONTROL      ##########################################

				self._widget.hsld_flipper_left_front_move.valueChanged.connect(
					self._on_flipper_left_front_slider_value_changed)
				self._widget.pbtn_flipper_left_front_move_neg.pressed.connect(
					self._on_flipper_left_front_move_neg_button_pressed)				
				self._widget.pbtn_flipper_left_front_move_pos.pressed.connect(
					self._on_flipper_left_front_move_pos_button_pressed)
				
				self._widget.hsld_flipper_right_front_move.valueChanged.connect(
					self._on_flipper_right_front_slider_value_changed)
				self._widget.pbtn_flipper_right_front_move_neg.pressed.connect(
					self._on_flipper_right_front_move_neg_button_pressed)				
				self._widget.pbtn_flipper_right_front_move_pos.pressed.connect(
					self._on_flipper_right_front_move_pos_button_pressed)

				self._widget.hsld_flipper_left_back_move.valueChanged.connect(
					self._on_flipper_left_back_slider_value_changed)
				self._widget.pbtn_flipper_left_back_move_neg.pressed.connect(
					self._on_flipper_left_back_move_neg_button_pressed)				
				self._widget.pbtn_flipper_left_back_move_pos.pressed.connect(
					self._on_flipper_left_back_move_pos_button_pressed)
					
				self._widget.hsld_flipper_right_back_move.valueChanged.connect(
					self._on_flipper_right_back_slider_value_changed)
				self._widget.pbtn_flipper_right_back_move_neg.pressed.connect(
					self._on_flipper_right_back_move_neg_button_pressed)				
				self._widget.pbtn_flipper_right_back_move_pos.pressed.connect(
					self._on_flipper_right_back_move_pos_button_pressed)
				
				self._widget.hsld_flipper_left_move.valueChanged.connect(
					self._on_flipper_left_slider_value_changed)
				self._widget.pbtn_flipper_left_move_neg.pressed.connect(
					self._on_flipper_left_move_neg_button_pressed)				
				self._widget.pbtn_flipper_left_move_pos.pressed.connect(
					self._on_flipper_left_move_pos_button_pressed)
					
				self._widget.hsld_flipper_right_move.valueChanged.connect(
					self._on_flipper_right_slider_value_changed)
				self._widget.pbtn_flipper_right_move_neg.pressed.connect(
					self._on_flipper_right_move_neg_button_pressed)				
				self._widget.pbtn_flipper_right_move_pos.pressed.connect(
					self._on_flipper_right_move_pos_button_pressed)
				
				self._widget.hsld_flipper_front_move.valueChanged.connect(
					self._on_flipper_front_slider_value_changed)
				self._widget.pbtn_flipper_front_move_neg.pressed.connect(
					self._on_flipper_front_move_neg_button_pressed)				
				self._widget.pbtn_flipper_front_move_pos.pressed.connect(
					self._on_flipper_front_move_pos_button_pressed)
					
				self._widget.hsld_flipper_back_move.valueChanged.connect(
					self._on_flipper_back_slider_value_changed)
				self._widget.pbtn_flipper_back_move_neg.pressed.connect(
					self._on_flipper_back_move_neg_button_pressed)				
				self._widget.pbtn_flipper_back_move_pos.pressed.connect(
					self._on_flipper_back_move_pos_button_pressed)
					
				self._widget.hsld_flipper_all_move.valueChanged.connect(
					self._on_flipper_all_slider_value_changed)
				self._widget.pbtn_flipper_all_move_neg.pressed.connect(
					self._on_flipper_all_move_neg_button_pressed)				
				self._widget.pbtn_flipper_all_move_pos.pressed.connect(
					self._on_flipper_all_move_pos_button_pressed)


######       DEF ARM CONTROL          ##########################################

				self._widget.hsld_arm_x_move.valueChanged.connect(
					self._on_arm_x_slider_value_changed)
				self._widget.pbtn_arm_x_move_neg.pressed.connect(
					self._on_arm_x_move_neg_button_pressed)				
				self._widget.pbtn_arm_x_move_pos.pressed.connect(
					self._on_arm_x_move_pos_button_pressed)
				self._widget.pbtn_x_pos_preset_save_1.pressed.connect(
					self._on_gripper_x_pos_preset_save_1_button_pressed)

					
				self._widget.hsld_arm_y_move.valueChanged.connect(
					self._on_arm_y_slider_value_changed)
				self._widget.pbtn_arm_y_move_neg.pressed.connect(
					self._on_arm_y_move_neg_button_pressed)				
				self._widget.pbtn_arm_y_move_pos.pressed.connect(
					self._on_arm_y_move_pos_button_pressed)
				self._widget.pbtn_y_pos_preset_save_1.pressed.connect(
					self._on_gripper_y_pos_preset_save_1_button_pressed)
				self._widget.pbtn_y_pos_preset_set_1.pressed.connect(
					self._on_gripper_y_pos_preset_set_1_button_pressed)
					
				self._widget.hsld_arm_z_move.valueChanged.connect(
					self._on_arm_z_slider_value_changed)
				self._widget.pbtn_arm_z_move_neg.pressed.connect(
					self._on_arm_z_move_neg_button_pressed)				
				self._widget.pbtn_arm_z_move_pos.pressed.connect(
					self._on_arm_z_move_pos_button_pressed)

				self._widget.hsld_arm_roll_move.valueChanged.connect(
					self._on_arm_roll_slider_value_changed)
				self._widget.pbtn_arm_roll_move_neg.pressed.connect(
					self._on_arm_roll_move_neg_button_pressed)				
				self._widget.pbtn_arm_roll_move_pos.pressed.connect(
					self._on_arm_roll_move_pos_button_pressed)
					
				self._widget.hsld_arm_pitch_move.valueChanged.connect(
					self._on_arm_pitch_slider_value_changed)
				self._widget.pbtn_arm_pitch_move_neg.pressed.connect(
					self._on_arm_pitch_move_neg_button_pressed)				
				self._widget.pbtn_arm_pitch_move_pos.pressed.connect(
					self._on_arm_pitch_move_pos_button_pressed)
					
				self._widget.hsld_arm_yaw_move.valueChanged.connect(
					self._on_arm_yaw_slider_value_changed)
				self._widget.pbtn_arm_yaw_move_neg.pressed.connect(
					self._on_arm_yaw_move_neg_button_pressed)				
				self._widget.pbtn_arm_yaw_move_pos.pressed.connect(
					self._on_arm_yaw_move_pos_button_pressed)					
					
				self._widget.hsld_gripper_open_move.valueChanged.connect(
					self._on_gripper_open_slider_value_changed)
				self._widget.pbtn_gripper_open_move_neg.pressed.connect(
					self._on_gripper_open_move_neg_button_pressed)				
				self._widget.pbtn_gripper_open_move_pos.pressed.connect(
					self._on_gripper_open_move_pos_button_pressed)
				self._widget.pbtn_gripper_open.pressed.connect(
					self._on_gripper_open_button_pressed)
										
				self._widget.hsld_gripper_close_move.valueChanged.connect(
					self._on_gripper_close_slider_value_changed)
				self._widget.pbtn_gripper_close_move_neg.pressed.connect(
					self._on_gripper_close_move_neg_button_pressed)				
				self._widget.pbtn_gripper_close_move_pos.pressed.connect(
					self._on_gripper_close_move_pos_button_pressed)
				self._widget.pbtn_gripper_close.pressed.connect(
					self._on_gripper_close_button_pressed)


######       FKT JOINT STATE PUBLISHER    ######################################				
		def source_cb(self, msg):
			for i in range(len(msg.name)):
				name = msg.name[i]
				position = msg.position[i]
				if name in self.free_joints:
					joint = self.free_joints[name]
					joint['value'] = position

		#def callback_tf(self, data):
		#		msg = JointState()
		#		msg.header.stamp = rospy.Time.now()
				# Add Free Joints
		#		for (name,joint) in self.free_joints.items():
		#				msg.name.append(str(name))
		#				msg.position.append(joint['value'])

				# Add Dependent Joints
		#		for (name,param) in self.dependent_joints.items():
		#				parent = param['parent']
		#				baseval = self.free_joints[parent]['value']
		#				value = baseval * param.get('factor', 1)

		#				msg.name.append(str(name))
		#				msg.position.append(value)

		#		self.pub.publish(msg)

		def update_tf(self, data):
				msg = JointState()
				msg.header.stamp = rospy.Time.now()
				# Add Free Joints
				for (name,joint) in self.free_joints.items():
						msg.name.append(str(name))
						msg.position.append(joint['value'])

				# Add Dependent Joints
				for (name,param) in self.dependent_joints.items():
						parent = param['parent']
						baseval = self.free_joints[parent]['value']
						value = baseval * param.get('factor', 1)

						msg.name.append(str(name))
						msg.position.append(value)

				self.pub.publish(msg)




######       FKT ARM CONTROL        ##########################################

#TRANSLAT X 										
		def _on_arm_x_slider_value_changed(self, value):
				try:
					str = "<Px%+05d>" % (value)
					self._widget.ledt_arm_x_move.setText(
						"%.1f" % (value))
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_arm_x_move_neg_button_pressed(self):
				self._widget.hsld_arm_x_move.setValue(
					self._widget.hsld_arm_x_move.value() - 1)
	
		def _on_arm_x_move_pos_button_pressed(self):
				self._widget.hsld_arm_x_move.setValue(
					self._widget.hsld_arm_x_move.value() + 1)
		
		def _on_gripper_x_pos_preset_save_1_button_pressed(self):
				self._widget.ledt_x_pos_preset_value_1.setText(
						"%.1f" % (self._widget.hsld_arm_x_move.value()))

				
#TRANSLAT Y 										
		def _on_arm_y_slider_value_changed(self, value):
				try:
					str = "<Py%+05d>" % (value)
					self._widget.ledt_arm_y_move.setText(
						"%.1f" % (value))
					self._pub_serial_out.publish(String(str))
					msg = JointState()
					msg.header.stamp = rospy.Time.now()
					msg.name.append("base_link_to_axis1")
					#msg.position[0] = value2
					msg.position.append(value)
					self.pub.publish(msg)
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_arm_y_move_neg_button_pressed(self):
				self._widget.hsld_arm_y_move.setValue(
					self._widget.hsld_arm_y_move.value() - 1)
				
		def _on_arm_y_move_pos_button_pressed(self):
				self._widget.hsld_arm_y_move.setValue(
					self._widget.hsld_arm_y_move.value() + 1)
					
		def _on_gripper_y_pos_preset_save_1_button_pressed(self):
				self._widget.ledt_y_pos_preset_value_1.setText(
						"%.1f" % (self._widget.hsld_arm_y_move.value()))

		def _on_gripper_y_pos_preset_set_1_button_pressed(self):
				target = int(self._widget.ledt_y_pos_preset_value_1.text()[:-2])
				if self._widget.hsld_arm_y_move.value() <= target:
					while self._widget.hsld_arm_y_move.value() < target:
						self._widget.hsld_arm_y_move.setValue(
							self._widget.hsld_arm_y_move.value() + 10)
						time.sleep(1)
				else:
					while self._widget.hsld_arm_y_move.value() > target:
						self._widget.hsld_arm_y_move.setValue(
							self._widget.hsld_arm_y_move.value() - 10)
						time.sleep(1)

					
#TRANSLAT Z 										
		def _on_arm_z_slider_value_changed(self, value):
				try:
					str = "<Pz%+05d>" % (value)
					self._widget.ledt_arm_z_move.setText(
						"%.1f" % (value))
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_arm_z_move_neg_button_pressed(self):
				self._widget.hsld_arm_z_move.setValue(
					self._widget.hsld_arm_z_move.value() - 1)
				
		def _on_arm_z_move_pos_button_pressed(self):
				self._widget.hsld_arm_z_move.setValue(
					self._widget.hsld_arm_z_move.value() + 1)


#ROTATION ROLL 										
		def _on_arm_roll_slider_value_changed(self, value):
				try:
					str = "<Ax%+05d>" % (value*10)
					self._widget.ledt_arm_roll_move.setText(
						"%.1f" % (value))
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_arm_roll_move_neg_button_pressed(self):
				self._widget.hsld_arm_roll_move.setValue(
					self._widget.hsld_arm_roll_move.value() - 1)
				
		def _on_arm_roll_move_pos_button_pressed(self):
				self._widget.hsld_arm_roll_move.setValue(
					self._widget.hsld_arm_roll_move.value() + 1)
					
#ROTATION PITCH 										
		def _on_arm_pitch_slider_value_changed(self, value):
				try:
					str = "<Ay%+05d>" % (value*10)
					self._widget.ledt_arm_pitch_move.setText(
						"%.1f" % (value))
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_arm_pitch_move_neg_button_pressed(self):
				self._widget.hsld_arm_pitch_move.setValue(
					self._widget.hsld_arm_pitch_move.value() - 1)
				
		def _on_arm_pitch_move_pos_button_pressed(self):
				self._widget.hsld_arm_pitch_move.setValue(
					self._widget.hsld_arm_pitch_move.value() + 1)						

#ROTATION YAW 										
		def _on_arm_yaw_slider_value_changed(self, value):
				try:
					str = "<Az%+05d>" % (value*10)
					self._widget.ledt_arm_yaw_move.setText(
						"%.1f" % (value))
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_arm_yaw_move_neg_button_pressed(self):
				self._widget.hsld_arm_yaw_move.setValue(
					self._widget.hsld_arm_yaw_move.value() - 1)
				
		def _on_arm_yaw_move_pos_button_pressed(self):
				self._widget.hsld_arm_yaw_move.setValue(
					self._widget.hsld_arm_yaw_move.value() + 1)
					
#GRIPPER OPEN										
		def _on_gripper_open_slider_value_changed(self, value):
				try:
					self._widget.ledt_gripper_open_move.setText(
						"%.1f" % (value + self._widget.hsld_gripper_offset_move.value()))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_gripper_open_move_neg_button_pressed(self):
				self._widget.hsld_gripper_open_move.setValue(
					self._widget.hsld_gripper_open_move.value() - 1)
				
		def _on_gripper_open_move_pos_button_pressed(self):
				self._widget.hsld_gripper_open_move.setValue(
					self._widget.hsld_gripper_open_move.value() + 1)
					
		def _on_gripper_open_button_pressed(self):
				try:
					str = "<G01COP%06d>" % self._widget.hsld_gripper_open_move.value()
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
#GRIPPER CLOSE					
		def _on_gripper_close_slider_value_changed(self, value):
				try: 
					self._widget.ledt_gripper_close_move.setText(
						"%.1f" % (value + self._widget.hsld_gripper_offset_move.value()))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_gripper_close_move_neg_button_pressed(self):
				self._widget.hsld_gripper_close_move.setValue(
					self._widget.hsld_gripper_close_move.value() - 1)
				
		def _on_gripper_close_move_pos_button_pressed(self):
				self._widget.hsld_gripper_close_move.setValue(
					self._widget.hsld_gripper_close_move.value() + 1)
					
		def _on_gripper_close_button_pressed(self):
				try:
					str = "<G01CGR%06d>" % self._widget.hsld_gripper_close_move.value()
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
																												
######       FKT ALLGEMEIN            ##########################################

#ACCU
		def callback_accu(self, data):
			self.emit(SIGNAL("new_value_accu1"), data.Accu1)
			self.emit(SIGNAL("new_value_accu2"), data.Accu2)

		def set_ledt_accu1(self, value):
			self._widget.ledt_accu1.setText("%.2f" % float(value) +" V")
			
		def set_ledt_accu2(self, value):
			self._widget.ledt_accu2.setText("%.2f" % float(value) +" V")

#CO2
		def callback_co2(self, data):
			self.emit(SIGNAL("new_value_co2"), data.data)

		def set_ledt_co2(self, value):
			self._widget.ledt_co2.setText("CO2 %.2f" % float(value) +" ppM")
				
#VICTIM_DETECTET
		def callback_victim_detected(self, data):
			self.emit(SIGNAL("new_value_victim_detected"), str(data))

		def set_ledt_victim_detected(self, value):
				#TODO: Aendern auf Hintergrundfarbe wechseln
				self._widget.ledt_victim_detected.show()
				self._widget.ledt_victim_detected_2.hide()
		
		def _on_victim_detected_confirm_button_pressed(self):
			if self._widget.ledt_victim_detected.isVisible():
				try:
					add_victim = rospy.ServiceProxy('worldmodel/add_object', AddObject)	    
					req = AddObject._request_class()
					req.object.header.frame_id = 'base_link'
					req.object.header.stamp = rospy.Time(0)
					req.map_to_next_obstacle = True
					req.object.info.class_id = "victim"
					req.object.info.support = 100
					req.object.pose.pose.position.x = 0.1
					req.object.pose.pose.position.y = 0
					req.object.pose.pose.position.z = 0
					req.object.pose.pose.orientation.w = 1
					req.object.state.state = ObjectState.CONFIRMED

					resp = add_victim(req)

					status_msg = "added Victim, id = "
					status_msg += resp.object.info.object_id
					print(status_msg)

					#-----rrt-fh-wels: Giuliano Roland   
					#self._task_id = resp.object.info.object_id
					#self._victimAnswer = VictimAnswer.CONFIRM
					#self._publish_answer()
				
					#TODO: Aendern auf Hintergrundfarbe wechseln
					self._on_victim_detected_cancel_button_pressed() 
				except rospy.ServiceException, e:
					print("Victim service call failed")

		def _on_victim_detected_cancel_button_pressed(self):            
				#TODO: Aendern auf Hintergrundfarbe wechseln
				self._widget.ledt_victim_detected_2.show()
				self._widget.ledt_victim_detected.hide()


#HOMING
		def _on_homing_button_pressed(self):
				try:
					fobj = open("/home/giuli/rrt_Stacks/rrt_rqt_plugin_mark_robot/data/homing.txt", "r")
					#fobj = open("/home/rrt/ros_workspace/rrt_gui/rrt_rqt_plugin_mark_robot/data/homing.txt", "r")
					for line in fobj.readlines():
						self._pub_serial_out.publish(String(line))
						time.sleep(0.01)
				except rospy.ServiceException, e:
					print("Service call failed")

#MOTOR ON
		def _on_motor_on_button_pressed(self):
				try:
					str = "<D11CMO000001>"
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")

#MOTOR OFF					
		def _on_motor_off_button_pressed(self):
				try:
					str = "<D11CMO000000>"
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")


#INVERSE ON		
		def _on_inverse_on_button_pressed(self):
				try:
					str = "<In+0001>"
					self._pub_serial_out.publish(String(str))
					#set slider to default
					#test
					self._widget.hsld_arm_x_move.setValue(1000)
					self._widget.hsld_arm_y_move.setValue(800)
					self._widget.hsld_arm_z_move.setValue(600)
					self._widget.hsld_arm_roll_move.setValue(0)
					self._widget.hsld_arm_pitch_move.setValue(0)
					self._widget.hsld_arm_yaw_move.setValue(0)				
				except rospy.ServiceException, e:
					print("Service call failed")

#INVERSE OFF
		def _on_inverse_off_button_pressed(self):
				try:
					str = "<In+0000>"
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")

#RELATIV ON		
		def _on_relativ_on_button_pressed(self):
				try:
					str = "<Ir+0000>"
					self._pub_serial_out.publish(String(str))				
				except rospy.ServiceException, e:
					print("Service call failed")

#RELATIV OFF
		def _on_relativ_off_button_pressed(self):
				try:
					str = "<Ir+0001>"
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")			
######       FKT SETTINGS             ##########################################

#GRIPPER
		def _on_gripper_offset_slider_value_changed(self, value):
					self._widget.ledt_gripper_offset_move.setText(
						"%.1f" % (value))
				
		def _on_gripper_offset_move_neg_button_pressed(self):
				self._widget.hsld_gripper_offset_move.setValue(
					self._widget.hsld_gripper_offset_move.value() - 1)
				
		def _on_gripper_offset_move_pos_button_pressed(self):
				self._widget.hsld_gripper_offset_move.setValue(
					self._widget.hsld_gripper_offset_move.value() + 1)
					
		def _on_gripper_force_slider_value_changed(self, value):
				try:
					str = "<G01CFR%06d>" % (value)
					self._widget.ledt_gripper_force_move.setText(
						"%.1f" % (value))
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_gripper_force_move_neg_button_pressed(self):
				self._widget.hsld_gripper_force_move.setValue(
					self._widget.hsld_gripper_force_move.value() - 1)
				
		def _on_gripper_force_move_pos_button_pressed(self):
				self._widget.hsld_gripper_force_move.setValue(
					self._widget.hsld_gripper_force_move.value() + 1)
	
#HEAD CAM
		def _on_head_cam_light_on_button_pressed(self):
				try:
					str = "<R01C00000001>"
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
					
		def _on_head_cam_light_off_button_pressed(self):
				try:
					str = "<R01C00000000>"
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")

#FRONT_CAM
		def _on_front_cam_slider_value_changed(self, value):
				try:
					str = "<S02P%+05d>" % (value*10)
					self._widget.ledt_front_cam_move.setText(
						"%.1f" % (value))
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_front_cam_move_neg_button_pressed(self):
				self._widget.hsld_front_cam_move.setValue(
					self._widget.hsld_front_cam_move.value() - 1)
				
		def _on_front_cam_move_pos_button_pressed(self):
				self._widget.hsld_front_cam_move.setValue(
					self._widget.hsld_front_cam_move.value() + 1)
					
#BACK_CAM
		def _on_back_cam_slider_value_changed(self, value):
				try:
					str = "<S01P%+05d>" % (value*10)
					self._widget.ledt_back_cam_move.setText(
						"%.1f" % (value))
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_back_cam_move_neg_button_pressed(self):
				self._widget.hsld_back_cam_move.setValue(
					self._widget.hsld_back_cam_move.value() - 1)
				
		def _on_back_cam_move_pos_button_pressed(self):
				self._widget.hsld_back_cam_move.setValue(
					self._widget.hsld_back_cam_move.value() + 1)				
######       FKT FLIPPER CONTROL      ##########################################

#LEFT_FRONT
		def _on_flipper_left_front_slider_value_changed(self, value):
				try:
					str = "<M06P%+05d>" % (value*10)
					self._widget.ledt_flipper_left_front_move.setText(
						"%.1f" % (value))
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_flipper_left_front_move_neg_button_pressed(self):
				self._widget.hsld_flipper_left_front_move.setValue(
					self._widget.hsld_flipper_left_front_move.value() - 1)
				
		def _on_flipper_left_front_move_pos_button_pressed(self):
				self._widget.hsld_flipper_left_front_move.setValue(
					self._widget.hsld_flipper_left_front_move.value() + 1)

#RIGHT_FRONT										
		def _on_flipper_right_front_slider_value_changed(self, value):
				try:
					str = "<M05P%+05d>" % (value*10)
					self._widget.ledt_flipper_right_front_move.setText(
						"%.1f" % (value))
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_flipper_right_front_move_neg_button_pressed(self):
				self._widget.hsld_flipper_right_front_move.setValue(
					self._widget.hsld_flipper_right_front_move.value() - 1)
				
		def _on_flipper_right_front_move_pos_button_pressed(self):
				self._widget.hsld_flipper_right_front_move.setValue(
					self._widget.hsld_flipper_right_front_move.value() + 1)

#LEFT_BACK
		def _on_flipper_left_back_slider_value_changed(self, value):
				try:
					str = "<M08P%+05d>" % (value*10)
					self._widget.ledt_flipper_left_back_move.setText(
						"%.1f" % (value))
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_flipper_left_back_move_neg_button_pressed(self):
				self._widget.hsld_flipper_left_back_move.setValue(
					self._widget.hsld_flipper_left_back_move.value() - 1)
				
		def _on_flipper_left_back_move_pos_button_pressed(self):
				self._widget.hsld_flipper_left_back_move.setValue(
					self._widget.hsld_flipper_left_back_move.value() + 1)

#RIGHT_BACK										
		def _on_flipper_right_back_slider_value_changed(self, value):
				try:
					str = "<M07P%+05d>" % (value*10)
					self._widget.ledt_flipper_right_back_move.setText(
						"%.1f" % (value))
					self._pub_serial_out.publish(String(str))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_flipper_right_back_move_neg_button_pressed(self):
				self._widget.hsld_flipper_right_back_move.setValue(
					self._widget.hsld_flipper_right_back_move.value() - 1)
				
		def _on_flipper_right_back_move_pos_button_pressed(self):
				self._widget.hsld_flipper_right_back_move.setValue(
					self._widget.hsld_flipper_right_back_move.value() + 1)

#LEFT										
		def _on_flipper_left_slider_value_changed(self, value):
				try:
					self._widget.ledt_flipper_left_move.setText(
						"%.1f" % (value))
					self._widget.hsld_flipper_left_front_move.setValue(value)
					self._widget.ledt_flipper_left_front_move.setText(
						"%.1f" % (value))
					self._widget.hsld_flipper_left_back_move.setValue(value)
					self._widget.ledt_flipper_left_back_move.setText(
						"%.1f" % (value))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_flipper_left_move_neg_button_pressed(self):
				self._widget.hsld_flipper_left_move.setValue(
					self._widget.hsld_flipper_left_move.value() - 1)
				
		def _on_flipper_left_move_pos_button_pressed(self):
				self._widget.hsld_flipper_left_move.setValue(
					self._widget.hsld_flipper_left_move.value() + 1)

#RIGHT										
		def _on_flipper_right_slider_value_changed(self, value):
				try:
					self._widget.ledt_flipper_right_move.setText(
						"%.1f" % (value))
					self._widget.hsld_flipper_right_front_move.setValue(value)
					self._widget.ledt_flipper_right_front_move.setText(
						"%.1f" % (value))
					self._widget.hsld_flipper_right_back_move.setValue(value)
					self._widget.ledt_flipper_right_back_move.setText(
						"%.1f" % (value))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_flipper_right_move_neg_button_pressed(self):
				self._widget.hsld_flipper_right_move.setValue(
					self._widget.hsld_flipper_right_move.value() - 1)
				
		def _on_flipper_right_move_pos_button_pressed(self):
				self._widget.hsld_flipper_right_move.setValue(
					self._widget.hsld_flipper_right_move.value() + 1)

#FRONT															
		def _on_flipper_front_slider_value_changed(self, value):
				try:
					self._widget.ledt_flipper_front_move.setText(
						"%.1f" % (value))
					self._widget.hsld_flipper_left_front_move.setValue(value)
					self._widget.ledt_flipper_left_front_move.setText(
						"%.1f" % (value))
					self._widget.hsld_flipper_right_front_move.setValue(value)
					self._widget.ledt_flipper_right_front_move.setText(
						"%.1f" % (value))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_flipper_front_move_neg_button_pressed(self):
				self._widget.hsld_flipper_front_move.setValue(
					self._widget.hsld_flipper_front_move.value() - 1)
				
		def _on_flipper_front_move_pos_button_pressed(self):
				self._widget.hsld_flipper_front_move.setValue(
					self._widget.hsld_flipper_front_move.value() + 1)

#BACK								
		def _on_flipper_back_slider_value_changed(self, value):
				try:
						self._widget.ledt_flipper_back_move.setText(
							"%.1f" % (value))
						self._widget.hsld_flipper_left_back_move.setValue(value)
						self._widget.ledt_flipper_left_back_move.setText(
							"%.1f" % (value))
						self._widget.hsld_flipper_right_back_move.setValue(value)
						self._widget.ledt_flipper_right_back_move.setText(
							"%.1f" % (value))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_flipper_back_move_neg_button_pressed(self):
				self._widget.hsld_flipper_back_move.setValue(
					self._widget.hsld_flipper_back_move.value() - 1)
				
		def _on_flipper_back_move_pos_button_pressed(self):
				self._widget.hsld_flipper_back_move.setValue(
					self._widget.hsld_flipper_back_move.value() + 1)

#ALL
		def _on_flipper_all_slider_value_changed(self, value):
				try:
					self._widget.ledt_flipper_all_move.setText(
						"%.1f" % (value))
					self._widget.hsld_flipper_left_move.setValue(value)
					self._widget.ledt_flipper_left_move.setText(
						"%.1f" % (value))
					self._widget.hsld_flipper_right_move.setValue(value)
					self._widget.ledt_flipper_right_move.setText(
						"%.1f" % (value))
					self._widget.hsld_flipper_front_move.setValue(value)
					self._widget.ledt_flipper_front_move.setText(
						"%.1f" % (value))
					self._widget.hsld_flipper_back_move.setValue(value)
					self._widget.ledt_flipper_back_move.setText(
						"%.1f" % (value))
				except rospy.ServiceException, e:
					print("Service call failed")
				
		def _on_flipper_all_move_neg_button_pressed(self):
				self._widget.hsld_flipper_all_move.setValue(
					self._widget.hsld_flipper_all_move.value() - 1)
				
		def _on_flipper_all_move_pos_button_pressed(self):
				self._widget.hsld_flipper_all_move.setValue(
					self._widget.hsld_flipper_all_move.value() + 1)		
							
"""
		def shutdown_plugin(self):
				# TODO unregister all publishers here
				pass
				
		def save_settings(self, plugin_settings, instance_settings):
				# TODO save intrinsic configuration, usually using:
				# instance_settings.set_value(k, v)
				pass
				
		def restore_settings(self, plugin_settings, instance_settings):
				# TODO restore intrinsic configuration, usually using:
				# v = instance_settings.value(k)
				pass
				
		#def trigger_configuration(self):
				# Comment in to signal that the plugin has a way to configure it
				# Usually used to open a configuration dialog
"""				
